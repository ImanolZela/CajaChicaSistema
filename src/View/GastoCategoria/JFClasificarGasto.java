
package View.GastoCategoria;

import Controller.GastoCategoria.AprobarRendicion;
import Controller.GastoCategoria.GastoController;
import Controller.GastoCategoria.ReporteGastosPDF;
import Model.Rendicion_Gastos;
import java.io.File;
import java.util.List;
import javax.swing.table.DefaultTableModel;;

public class JFClasificarGasto extends javax.swing.JFrame {

     private GastoController gastoController;
     private AprobarRendicion aprobarRendicionController;
     private DefaultTableModel modeloTabla;
     private List<Rendicion_Gastos> listaFiltradaActual; 
     
    
    public JFClasificarGasto() {
        this.gastoController = new GastoController();
        this.aprobarRendicionController = new AprobarRendicion();
        
        initComponents();
           
        modeloTabla = new DefaultTableModel(new Object[]{"ID", "Descripción", "Monto", "Fecha", "Categoría", "Estado"}, 0);
        cargarDatosTabla.setModel(modeloTabla);
        cargarDatosTabla(gastoController.obtenerTodosLosGastos());
        cbSeleccionCategoria.setEnabled(false);
        btnRestarOrden.setEnabled(false);

        cbSeleccionCategoria.setEnabled(false);
        btnRestarOrden.setEnabled(false);
        
        btnAprobarRendicion.addActionListener(evt -> aprobarRendicionSeleccionada());
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        cargarDatosTabla = new javax.swing.JTable();
        cbFiltroCategoria = new javax.swing.JComboBox<>();
        btnFiltro = new javax.swing.JButton();
        cbSeleccionCategoria = new javax.swing.JComboBox<>();
        btnGenerarReporte = new javax.swing.JButton();
        btnRestarOrden = new javax.swing.JButton();
        btnAprobarRendicion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cargarDatosTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(cargarDatosTabla);

        cbFiltroCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filtrar por ...", "Categoria", "Precio" }));
        cbFiltroCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFiltroCategoriaActionPerformed(evt);
            }
        });

        btnFiltro.setText("Filtrar");
        btnFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltroActionPerformed(evt);
            }
        });

        cbSeleccionCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione ...", "Alimentacion", "Transporte", "Hospedaje", "Otros", " " }));

        btnGenerarReporte.setText("Generar Reporte");
        btnGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarReporteActionPerformed(evt);
            }
        });

        btnRestarOrden.setText("Deshacer Cambios");
        btnRestarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestarOrdenActionPerformed(evt);
            }
        });

        btnAprobarRendicion.setText("Aprobar Rendicion");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cbSeleccionCategoria, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbFiltroCategoria, javax.swing.GroupLayout.Alignment.LEADING, 0, 147, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnFiltro)
                        .addGap(18, 18, 18)
                        .addComponent(btnRestarOrden)
                        .addGap(205, 205, 205)
                        .addComponent(btnAprobarRendicion, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(cbFiltroCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSeleccionCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFiltro)
                    .addComponent(btnRestarOrden)
                    .addComponent(btnAprobarRendicion))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void cargarDatosTabla(List<Rendicion_Gastos> listaGastos) {
        modeloTabla.setRowCount(0);

        for (Rendicion_Gastos gasto : listaGastos) {
            modeloTabla.addRow(new Object[]{
                    gasto.getRendicion_id(),
                    gasto.getDescripcion_gasto(),
                    gasto.getMonto(),
                    gasto.getFecha_gasto(),
                    gasto.getCategoria_id(),
                    gasto.getEstado()
            });
        }
    }
    
    private void aprobarRendicionSeleccionada() {
        int filaSeleccionada = cargarDatosTabla.getSelectedRow();
        
        if (filaSeleccionada == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Por favor, seleccione una rendición de la tabla.", 
                "Rendición no seleccionada", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        int rendicionId = (int) modeloTabla.getValueAt(filaSeleccionada, 0); 
        String estadoActual = (String) modeloTabla.getValueAt(filaSeleccionada, 5);

        if ("Aprobado".equals(estadoActual)) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "La rendición ya está aprobada.", 
                "Rendición ya aprobada", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        boolean exito = aprobarRendicionController.aprobarRendicion(rendicionId);
        
        if (exito) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "La rendición ha sido aprobada exitosamente.", 
                "Aprobación exitosa", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
            modeloTabla.setValueAt("Aprobado", filaSeleccionada, 5);
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Error al aprobar la rendición.", 
                "Error", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void cbFiltroCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFiltroCategoriaActionPerformed

        if ("Categoria".equals(cbFiltroCategoria.getSelectedItem().toString())) {
            cbSeleccionCategoria.setEnabled(true);
        } else {
            cbSeleccionCategoria.setEnabled(false);
            cbSeleccionCategoria.setSelectedIndex(0);
        }
    }//GEN-LAST:event_cbFiltroCategoriaActionPerformed

    private void btnFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltroActionPerformed
        String filtroSeleccionado = cbFiltroCategoria.getSelectedItem().toString();
        
        if ("Filtrar por ...".equals(filtroSeleccionado)) {
            javax.swing.JOptionPane.showMessageDialog(this, 
            "Por favor, seleccione una opción de filtro (Categoría o Precio) antes de filtrar.", 
            "Filtro no seleccionado", 
            javax.swing.JOptionPane.WARNING_MESSAGE);
            return; 
        }
        
        if ("Categoria".equals(filtroSeleccionado) && "Seleccione ...".equals(cbSeleccionCategoria.getSelectedItem().toString())) {
            javax.swing.JOptionPane.showMessageDialog(this, 
            "Por favor, seleccione una categoría específica antes de filtrar.", 
            "Categoría no seleccionada", 
            javax.swing.JOptionPane.WARNING_MESSAGE);
            return; 
        }
        
            listaFiltradaActual = gastoController.procesarFiltrado(filtroSeleccionado, cbSeleccionCategoria.getSelectedItem().toString());
            cargarDatosTabla(listaFiltradaActual);
        
        btnRestarOrden.setEnabled(true);
    }//GEN-LAST:event_btnFiltroActionPerformed

    private void btnGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarReporteActionPerformed

        if (cargarDatosTabla.getRowCount() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "No hay datos disponibles en la tabla para generar el reporte.", 
                "Tabla Vacía", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
            return; 
        }

        List<Rendicion_Gastos> datosParaReporte;
        if (listaFiltradaActual == null || listaFiltradaActual.isEmpty()) {
            datosParaReporte = gastoController.obtenerTodosLosGastos();
        } else {
            datosParaReporte = listaFiltradaActual;
        }
 
        ReporteGastosPDF reportePDF = new ReporteGastosPDF();
        reportePDF.generarReporte(datosParaReporte);

        javax.swing.JOptionPane.showMessageDialog(this, 
            "El reporte PDF ha sido generado exitosamente.", 
            "Reporte Generado", 
            javax.swing.JOptionPane.INFORMATION_MESSAGE);
        
        try{
            File directorio = new File("reportes");
            
            if(directorio.exists()){
                java.awt.Desktop.getDesktop().open(directorio);               
            }else{
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "No se pudo abrir la carpeta de reportes.", 
                    "Error al abrir carpeta", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            }         
        }catch(Exception e){
             javax.swing.JOptionPane.showMessageDialog(this, 
            "Error al intentar abrir la carpeta de reportes: " + e.getMessage(), 
            "Error", 
            javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGenerarReporteActionPerformed

    private void btnRestarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestarOrdenActionPerformed
        List<Rendicion_Gastos> listaOriginal = gastoController.obtenerTodosLosGastos();
        cargarDatosTabla(listaOriginal);
        
        cbFiltroCategoria.setSelectedIndex(0);
        cbSeleccionCategoria.setSelectedIndex(0);
        cbSeleccionCategoria.setEnabled(false);
        
        btnRestarOrden.setEnabled(false);
                
        javax.swing.JOptionPane.showMessageDialog(this, 
            "El orden original ha sido restaurado.", 
            "Orden Restaurado", 
        javax.swing.JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_btnRestarOrdenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFClasificarGasto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFClasificarGasto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFClasificarGasto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFClasificarGasto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFClasificarGasto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAprobarRendicion;
    private javax.swing.JButton btnFiltro;
    private javax.swing.JButton btnGenerarReporte;
    private javax.swing.JButton btnRestarOrden;
    private javax.swing.JTable cargarDatosTabla;
    private javax.swing.JComboBox<String> cbFiltroCategoria;
    private javax.swing.JComboBox<String> cbSeleccionCategoria;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
